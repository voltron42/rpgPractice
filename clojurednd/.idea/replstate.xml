<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1492788217471">{:repl-history {:ide [], :local [&quot;\n(clojurednd.core/-main)&quot; &quot;0\n(clojurednd.core/-main)&quot; &quot;(map int (seq \&quot;⊡⊟\&quot;))&quot; &quot;(count [\&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot;])&quot; &quot;(count [\&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot;])&quot; &quot;(/ (count [\&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot;]) 19) &quot; &quot;(defn flip [lista listb] (mapv conj (map vector lista) listb))&quot; &quot;(flip [:a :b :c] [:x :y :z])&quot; &quot;(def listAbilities (clojurednd.core/listInverter (:abilityFields clojurednd.core/headers) (:abilities clojurednd.core/headers)))&quot; &quot;(listAbilities [\&quot;14\&quot; \&quot;13\&quot; \&quot;19\&quot; \&quot;9\&quot; \&quot;13\&quot; \&quot;10\&quot; \&quot;true\&quot; \&quot;false\&quot; \&quot;true\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot;])&quot; &quot;(clojurednd.core/varListBuilder (:weapon :damageDice :dice))&quot; &quot;(clojurednd.core/varListBuilder (:weapon clojurednd.core/headers) :damageDice (:dice clojurednd.core/headers))&quot; &quot;(weaponList [\&quot;4\&quot;\n             \&quot;Greatsword\&quot; \&quot;5 feet\&quot; \&quot;2\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;true\&quot; \&quot;true\&quot; \&quot;1\&quot; \&quot;2\&quot; \&quot;6\&quot;\n             \&quot;Longsword\&quot; \&quot;5 feet\&quot; \&quot;2\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;true\&quot; \&quot;true\&quot; \&quot;1\&quot; \&quot;1\&quot; \&quot;8\&quot;\n             \&quot;Light Crossbow\&quot; \&quot;80/320\&quot; \&quot;1\&quot; \&quot;1\&quot; \&quot;0\&quot; \&quot;2\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;true\&quot; \&quot;true\&quot; \&quot;1\&quot; \&quot;1\&quot; \&quot;8\&quot;\n             \&quot;Handaxe\&quot; \&quot;20/60\&quot; \&quot;2\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;true\&quot; \&quot;true\&quot; \&quot;1\&quot; \&quot;1\&quot; \&quot;6\&quot;])&quot; &quot;(weaponList 4 [\&quot;Greatsword\&quot; \&quot;5 feet\&quot; \&quot;2\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;true\&quot; \&quot;true\&quot; \&quot;1\&quot; \&quot;2\&quot; \&quot;6\&quot;\n               \&quot;Longsword\&quot; \&quot;5 feet\&quot; \&quot;2\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;true\&quot; \&quot;true\&quot; \&quot;1\&quot; \&quot;1\&quot; \&quot;8\&quot;\n               \&quot;Light Crossbow\&quot; \&quot;80/320\&quot; \&quot;1\&quot; \&quot;1\&quot; \&quot;0\&quot; \&quot;2\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;true\&quot; \&quot;true\&quot; \&quot;1\&quot; \&quot;1\&quot; \&quot;8\&quot;\n               \&quot;Handaxe\&quot; \&quot;20/60\&quot; \&quot;2\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;true\&quot; \&quot;true\&quot; \&quot;1\&quot; \&quot;1\&quot; \&quot;6\&quot;])&quot; &quot;(def weaponList (clojurednd.core/varListBuilder (:weapon clojurednd.core/headers) :damageDice (:dice clojurednd.core/headers)))&quot; &quot;(weaponList [\&quot;4\&quot; \&quot;Greatsword\&quot; \&quot;5 feet\&quot; \&quot;2\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;true\&quot; \&quot;true\&quot; \&quot;1\&quot; \&quot;2\&quot; \&quot;6\&quot;\n               \&quot;Longsword\&quot; \&quot;5 feet\&quot; \&quot;2\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;true\&quot; \&quot;true\&quot; \&quot;1\&quot; \&quot;1\&quot; \&quot;8\&quot;\n               \&quot;Light Crossbow\&quot; \&quot;80/320\&quot; \&quot;1\&quot; \&quot;1\&quot; \&quot;0\&quot; \&quot;2\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;true\&quot; \&quot;true\&quot; \&quot;1\&quot; \&quot;1\&quot; \&quot;8\&quot;\n               \&quot;Handaxe\&quot; \&quot;20/60\&quot; \&quot;2\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;true\&quot; \&quot;true\&quot; \&quot;1\&quot; \&quot;1\&quot; \&quot;6\&quot;])&quot; &quot;(weaponList)&quot; &quot;(clojurednd.core/listBuilder (:hitDice clojurednd.core/headers))&quot; &quot;(:weapon clojurednd.core/headers)&quot; &quot;(:dice clojurednd.core/headers)&quot; &quot;(into {} (:numberOf \&quot;3\&quot; :sideCount \&quot;8\&quot; :remaining \&quot;3\&quot;))&quot; &quot;(apply (partial into {}) (:numberOf \&quot;3\&quot; :sideCount \&quot;8\&quot; :remaining \&quot;3\&quot;))&quot; &quot;(apply assoc {} (:numberOf \&quot;3\&quot; :sideCount \&quot;8\&quot; :remaining \&quot;3\&quot;))&quot; &quot;(apply (partial assoc {}) (:numberOf \&quot;3\&quot; :sideCount \&quot;8\&quot; :remaining \&quot;3\&quot;))&quot; &quot;(def listAbilities (clojurednd.core/listInverter (:abilityFields clojurednd.core/headers) (:abilities clojurednd.core/headers) {:modifier (fn [{:keys [score]}] (int (/ (- score 10) 2)))}))&quot; &quot;(listAbilities [\&quot;14\&quot; \&quot;11\&quot; \&quot;15\&quot; \&quot;12\&quot; \&quot;9\&quot; \&quot;15\&quot; \&quot;false\&quot; \&quot;true\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;true\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot;])\\&quot; &quot;(def listAbilities (clojurednd.core/listInverter (:abilityFields clojurednd.core/headers) (:abilities clojurednd.core/headers) {:score (fn [{:keys [score]}] (Integer/parseInt score))} {:modifier (fn [{:keys [score]}] (int (/ (- score 10) 2)))}))&quot; &quot;(def listAbilities (clojurednd.core/listInverter (:abilityFields clojurednd.core/headers) (:abilities clojurednd.core/headers) {:score (fn [{:keys [score]}] (Integer/parseInt score)) :isSaveProficient (fn [{:keys [isSaveProficient]}] (Boolean/parseBoolean isSaveProficient))} {:modifier (fn [{:keys [score]}] (int (/ (- score 10) 2)))}))&quot; &quot;(defn testKeys [{:keys [a b]}]\n  (println a)\n  (println b)\n  )&quot; &quot;(defn testKeys [{:keys [a b]}]\n  (println (empty? a))\n  (println (empty? b))\n  )&quot; &quot;(testKeys {})&quot; &quot;(def listHitDice (clojurednd.core/listBuilder (:hitDice clojurednd.core/headers)))&quot; &quot;(listHitDice [\&quot;2\&quot; \&quot;3\&quot; \&quot;8\&quot; \&quot;3\&quot; \&quot;4\&quot; \&quot;10\&quot; \&quot;4\&quot;])&quot; &quot;(def listAbilities (clojurednd.core/listInverter (:abilityFields clojurednd.core/headers) (:abilities clojurednd.core/headers) {:score (fn [{:keys [score]}] (Integer/parseInt score)) :bonus (fn [{:keys [bonus]}] (Integer/parseInt bonus)) :isSaveProficient (fn [{:keys [isSaveProficient]}] (Boolean/parseBoolean isSaveProficient))} {:modifier (fn [{:keys [score]}] (int (/ (- score 10) 2)))}))&quot; &quot;(listAbilities [\&quot;14\&quot; \&quot;11\&quot; \&quot;15\&quot; \&quot;12\&quot; \&quot;9\&quot; \&quot;15\&quot; \&quot;false\&quot; \&quot;true\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;false\&quot; \&quot;true\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot;])&quot; &quot;(def weaponList (clojurednd.core/varListBuilder (:weapon clojurednd.core/headers) :damageDice (:dice clojurednd.core/headers)))\n&quot; &quot;(weaponList [\&quot;2\&quot; \&quot;Longsword\&quot; \&quot;5 feet\&quot; \&quot;1102\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;true\&quot; \&quot;true\&quot; \&quot;1\&quot; \&quot;1\&quot; \&quot;8\&quot; \&quot;Dagger\&quot; \&quot;20/60\&quot; \&quot;1101\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;0\&quot; \&quot;true\&quot; \&quot;true\&quot; \&quot;1\&quot; \&quot;1\&quot; \&quot;4\&quot;])&quot; &quot;(clojurednd.core/mapObj clojurednd.core/embedKey {(clojurednd.core/nilSafe (clojurednd.core/parse :int)) [:score :bonus]})&quot; &quot;(clojurednd.core/flipMap {(clojurednd.core/nilSafe (clojurednd.core/parse :int)) [:score :bonus]})&quot; &quot;(clojurednd.core/mapObj\n  (fn [[k f]] (do (println k) #(f (% k))))\n  (clojurednd.core/flipMap {(clojurednd.core/nilSafe (clojurednd.core/parse :int)) [:score :bonus]})\n  ) \n&quot; &quot;(clojurednd.core/mapObj\n  (fn perEntry [[k f]] (do (println k) (fn [obj] (f (obj k)))))\n  (clojurednd.core/flipMap {(clojurednd.core/nilSafe (clojurednd.core/parse :int)) [:score :bonus]})\n  ) \n&quot; &quot;(clojurednd.core/mapObj\n  clojurednd.core/embedKey\n  (clojurednd.core/flipMap {(clojurednd.core/nilSafe (clojurednd.core/parse :int)) [:score :bonus]})\n  ) \n&quot; &quot;((clojurednd.core/buildSplitter #\&quot;,\&quot;) \&quot;1,2,3,4\&quot;) &quot; &quot;((clojurednd.core/mapSplit #\&quot;,\&quot; #(Integer/parseInt %)) \&quot;1,2,3,4\&quot;)&quot; &quot;(clojurednd.core/charFuncs {:abilityScores \&quot;14⊠13⊠19⊠9⊠13⊠10⊠true⊠false⊠true⊠false⊠false⊠false⊠0⊠0⊠0⊠0⊠0⊠0⊠0\&quot;})&quot; &quot;(let [result ])&quot; &quot;(let [result (clojurednd.core/charFuncs {:abilityScores \&quot;14⊠13⊠19⊠9⊠13⊠10⊠true⊠false⊠true⊠false⊠false⊠false⊠0⊠0⊠0⊠0⊠0⊠0⊠0\&quot;})] (:abilityScores result))&quot; &quot;(def split8864 (clojurednd.core/mapSplit (clojurednd.core/charDelim 8864)))&quot; &quot;(def split8864 (clojurednd.core/mapSplit (clojurednd.core/charDelim 8864) identity))&quot; &quot;(split8864 \&quot;1⊠7⊠10⊠7\&quot;)&quot; &quot;(def buildHitDice (clojurednd.core/mapSplit (clojurednd.core/charDelim 8864) (clojurednd.core/listBuilder\n                                                                            (:hitDice clojurednd.core/headers)\n                                                                            (-&gt;&gt; {(clojurednd.core/nilSafe (clojurednd.core/parse :int)) [:numberOf :sideCount :remaining]} (clojurednd.core/flipMap) (clojurednd.core/mapObj clojurednd.core/embedKey))\n                                                                            )))&quot; &quot;(buildHitDice \&quot;1⊠7⊠10⊠7\&quot;)&quot; &quot;(clojurednd.core/-main)&quot;], :remote []}}</component>
</project>